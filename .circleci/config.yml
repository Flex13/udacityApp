version: 2.1
orbs:
  slack: circleci/slack@4.10.1
commands:
  notify_failure:
    steps:
      - slack/notify:
          channel: udacitydev
          event: fail
          template: basic_fail_1
  install_ansible:
    description: install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: >
            aws cloudformation delete-stack --stack-name
            udapeople-backend-<<parameters.workflow_id>>

            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive

            aws cloudformation delete-stack --stack-name
            udapeople-frontend-<<parameters.workflow_id>>
jobs:
  build-frontend:
    docker:
      - image: 'cimg/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths:
            - frontend/node_modules
          key: frontend-deps
      - notify_failure
  build-backend:
    docker:
      - image: 'cimg/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths:
            - backend/node_modules
          key: backend-deps
      - notify_failure
  test-frontend:
    docker:
      - image: 'cimg/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps
      - run:
          name: front end unit test
          command: |
            cd frontend
            npm install
            npm run test
      - notify_failure
  test-backend:
    docker:
      - image: 'cimg/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-deps
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm run test
      - notify_failure
  scan-frontend:
    docker:
      - image: 'cimg/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-deps
      - run:
          name: frontEnd Scan
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
      - notify_failure
  scan-backend:
    docker:
      - image: 'circleci/node:13.8.0'
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical
      - notify_failure
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
  configure-infrastructure:
    docker:
      - image: 'python:3.7-alpine3.11'
    steps:
      - checkout
      - install_ansible
      - add_ssh_keys:
          fingerprints:
            - 'f1:f5:07:72:ec:51:74:5f:9e:62:00:2c:48:62:67:70'
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --upgrade bash
            apk add --update ansible
            apk add openssh-client
            pip3 install awscli
      - run:
          name: Configure server
          command: >
            cat .circleci/ansible/inventory.txt

            export ANSIBLE_HOST_KEY_CHECKING=False

            ansible-playbook -i .circleci/ansible/inventory.txt
            .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: '${CIRCLE_WORKFLOW_ID:0:7}'
    run-migrations:
      docker: null
      steps:
        - run:
            name: Run migrations
            command: |
              # Your code here
              exit 1
        - run:
            name: Send migration results to memstash
            command: |
              # Your code here
              exit 1
  notify_success:
    docker:
      - image: 'cimg/base:stable'
    steps:
      - slack/notify:
          channel: udacitydev
          event: pass
          template: success_tagged_deployment_1
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - notify_success:
          requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
      - deploy-infrastructure:
          requires:
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
          filters:
            branches:
              only:
                - master
